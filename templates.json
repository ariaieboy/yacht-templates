[
  {
    "type": 1,
    "title": "Pi-Hole",
    "name": "pihole",
    "description": "A Linux network-level advertisement and Internet tracker blocking application which acts as a DNS sinkhole.",
    "logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/pihole.png",
    "image": "pihole/pihole:latest",
    "categories": [
      "Other",
      "Tools"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      {
        "DNS TCP": "53:53/tcp",
        "DNS UDP": "53:53/udp",
        "DHCP": "67:67/udp",
        "WebUI": "1010:80/tcp",
        "HTTPS WebUI": "4443:443/tcp"
      }
    ],
    "volumes": [
      {
        "container": "/etc/pihole",
        "bind": "!config/PiHole"
      },
      {
        "container": "/etc/dnsmasq.d",
        "bind": "!config/PiHole/DNS"
      }
    ],
    "note": "When the installation is complete, navigate to your.ip.goes.here:1010/admin. Follow the article <a href='https://medium.com/@niktrix/getting-rid-of-systemd-resolved-consuming-port-53-605f0234f32f'>here</a> if you run into issues binding to port 53."
  },
  {
    "type": 1,
    "title": "Heimdall",
    "name": "heimdall",
    "description": "Heimdall is a way to organise all those links to your most used web sites and web applications in a simple way.",
    "logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/heimdall-icon.png",
    "image": "linuxserver/heimdall:latest",
    "categories": [
      "Tools",
      "Web",
      "Other"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      {
        "WebUI": "80/tcp",
        "HTTPS WebUI": "443/tcp"
      }
    ],
    "volumes": [
      {
        "container": "/config",
        "bind": "!config/Heimdall"
      }
    ],
    "env": [
      {
        "name": "PUID",
        "label": "PUID",
        "default": "!PUID"
      },
      {
        "name": "PGID",
        "label": "PGID",
        "default": "!PGID"
      }
    ]
  },
  {
    "type": 1,
    "title": "Jellyfin",
    "name": "jellyfin",
    "description": "Jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps.",
    "logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/jellyfin.png",
    "image": "linuxserver/jellyfin:latest",
    "categories": [
      "Video",
      "Music",
      "Photos"
    ],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "ports": [
      {
        "WebUI": "8096:8096/tcp",
        "HTTPS WebUI": "8920:8920/tcp",
        "DNLA": "1900:1900/udp",
        "Discovery": "7359:7359/udp"
      }
    ],
    "volumes": [
      {
        "container": "/config",
        "bind": "!config/Jellyfin"
      },
      {
        "container": "/data/tvshows",
        "bind": "!tv"
      },
      {
        "container": "/data/movies",
        "bind": "!movies"
      }
    ],
    "env": [
      {
        "name": "PUID",
        "label": "PUID",
        "default": "!PUID"
      },
      {
        "name": "PGID",
        "label": "PGID",
        "default": "!PGID"
      },
      {
        "name": "TZ",
        "label": "TZ"
      }
    ]
  },
  {
    "type": 1,
    "title": "Ripe Atlas Probe",
    "name": "ripe_atlas",
    "description": "The software packages that work as RIPE Atlas probes without the need for any dedicated RIPE Atlas hardware.",
    "logo": "https://raw.githubusercontent.com/ariaieboy/yacht-templates/main/images/ripe.png",
    "image": "jamesits/ripe-atlas:latest",
    "categories": [
      "Tools"
    ],
    "ports": [],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "volumes": [
      {
        "container": "/var/atlas-probe/etc",
        "bind": "/var/atlas-probe/etc"
      },
      {
        "container": "/var/atlas-probe/status",
        "bind": "/var/atlas-probe/status"
      }
    ],
    "env": [
      {
        "name": "RXTXRPT",
        "label": "RXTXRPT",
        "default": "yes"
      }
    ],
    "cap_drop": [
      "ALL"
    ],
    "cap_add": [
      "CHOWN",
      "SETUID",
      "SETGID",
      "DAC_OVERRIDE",
      "NET_RAW"
    ],
    "labels": [
      {
        "label": "traefik.enable",
        "value": false
      },
      {
        "label": "com.centurylinklabs.watchtower.enable",
        "value": true
      }
    ],
    "logging": {
      "driver": "json-file",
      "options": {
        "max-size": "10m"
      }
    },
    "note": "When the installation is complete, Fetch the generated public key from `/var/atlas-probe/etc/probe_key.pub` and register your probe here `https://atlas.ripe.net/apply/swprobe/`"
  },
  {
    "type": 1,
    "title": "Watchtower",
    "name": "watchtower",
    "description": "With watchtower you can update the running version of your containerized app simply by pushing a new image to the Docker Hub or your own image registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially.",
    "logo": "https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Images/watchtower.png",
    "image": "containrrr/watchtower:latest",
    "note": "It is recommended to manually update your containers but we're including this for those of you that don't care",
    "categories": [
      "Other",
      "Tools",
      "Maintenance"
    ],
    "ports": [],
    "platform": "linux",
    "restart_policy": "unless-stopped",
    "volumes": [
      {
        "container": "/var/run/docker.sock",
        "bind": "/var/run/docker.sock"
      }
    ]
  },
  {
    "type": 1,
    "title": "Docker Registry Pull Through Cache",
    "name": "docker-registry",
    "description": "A pull through cache for docker images",
    "logo": "https://raw.githubusercontent.com/ariaieboy/yacht-templates/main/images/docker.png",
    "image": "registery:2",
    "note": "Read https://docs.docker.com/registry/recipes/mirror/ for more information",
    "categories": [
      "docker",
      "cache",
      "docker-registry"
    ],
    "platform": "linux",
    "restart_policy": "always",
    "ports": [
      "5000:5000/tcp,udp"
    ],
    "network_mode": "bridge",
    "env": [
      {
        "name": "REGISTRY_PROXY_REMOTEURL",
        "label": "REGISTRY_PROXY_REMOTEURL",
        "default": "https://registry-1.docker.io"
      },
      {
        "name": "REGISTRY_PROXY_USERNAME",
        "label": "REGISTRY_PROXY_USERNAME"
      },
      {
        "name": "REGISTRY_PROXY_PASSWORD",
        "label": "REGISTRY_PROXY_PASSWORD"
      }
    ]
  }
]